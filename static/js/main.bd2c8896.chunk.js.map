{"version":3,"sources":["images/icon-check.svg","components/Todo.js","components/TodoList.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","text","todo","todos","setTodos","provided","snapshot","className","completed","isDragging","draggableProps","dragHandleProps","ref","innerRef","onClick","map","item","id","src","check","alt","xmlns","width","height","filter","el","fill","fillRule","d","TodoList","setFilter","filteredTodos","useState","left","setLeft","activeFilter","setActiveFilter","clearCompleted","useEffect","length","onDragEnd","result","destination","list","Array","from","splice","source","index","reorderedItem","droppableId","droppableProps","draggableId","placeholder","e","target","innerHTML","Form","changeTheme","inputText","setInputText","type","onChange","value","preventDefault","v4","hidden","App","theme","setTheme","setFilteredTodos","localStorage","getItem","setItem","JSON","stringify","local","parse","getLocalStorage","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd2c8896.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/icon-check.a8fb15d0.svg\";","import React from \"react\";\r\nimport check from \"../images/icon-check.svg\";\r\n\r\nconst Todo = ({ text, todo, todos, setTodos, provided, snapshot }) => {\r\n    function deleteHandler() {\r\n        setTodos(todos.filter((el) => el.id !== todo.id));\r\n    }\r\n\r\n    function completeHandler() {\r\n        setTodos(\r\n            todos.map((item) => {\r\n                if (item.id === todo.id) {\r\n                    return { ...item, completed: !item.completed };\r\n                }\r\n                return item;\r\n            })\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`todo row ${todo.completed ? \"completed\" : \"\"} ${\r\n                snapshot.isDragging && \"dragging\"\r\n            }`}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n        >\r\n            <div\r\n                className={`check_box ${todo.completed ? \"\" : \"check_style\"}`}\r\n                onClick={completeHandler}\r\n            >\r\n                <img src={check} alt=\"\"></img>\r\n            </div>\r\n            <p>{text}</p>\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"18\"\r\n                height=\"18\"\r\n                onClick={deleteHandler}\r\n            >\r\n                <path\r\n                    fill=\"#494C6B\"\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M16.97 0l.708.707L9.546 8.84l8.132 8.132-.707.707-8.132-8.132-8.132 8.132L0 16.97l8.132-8.132L0 .707.707 0 8.84 8.132 16.971 0z\"\r\n                />\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst TodoList = ({ todos, setTodos, setFilter, filteredTodos }) => {\r\n    const [left, setLeft] = useState(0);\r\n    const [activeFilter, setActiveFilter] = useState([true, false, false]);\r\n\r\n    // update the number of todos left on the list\r\n    useEffect(() => {\r\n        setLeft(todos.length);\r\n    }, [todos.length]);\r\n\r\n    function changeFilter(e) {\r\n        setFilter(e.target.innerHTML);\r\n        switch (e.target.innerHTML) {\r\n            case \"Active\":\r\n                setActiveFilter([false, true, false]);\r\n                break;\r\n            case \"Completed\":\r\n                setActiveFilter([false, false, true]);\r\n                break;\r\n            default:\r\n                setActiveFilter([true, false, false]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    function clearCompleted() {\r\n        setTodos(todos.filter((todo) => todo.completed === false));\r\n    }\r\n\r\n    function handleOnDragEnd(result) {\r\n        if (!result.destination) return;\r\n        const list = Array.from(todos);\r\n        const [reorderedItem] = list.splice(result.source.index, 1);\r\n        list.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        setTodos(list);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                <Droppable droppableId=\"List\">\r\n                    {(provided) => (\r\n                        <div\r\n                            className=\" todo-list\"\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {filteredTodos.map((todo, index) => (\r\n                                <Draggable\r\n                                    key={todo.id}\r\n                                    draggableId={todo.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <Todo\r\n                                            provided={provided}\r\n                                            snapshot={snapshot}\r\n                                            key={todo.id}\r\n                                            text={todo.text}\r\n                                            todo={todo}\r\n                                            todos={todos}\r\n                                            setTodos={setTodos}\r\n                                        />\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                            <div className=\"details row\">\r\n                                <p>{left} items left</p>\r\n                                <p className=\"clear\" onClick={clearCompleted}>\r\n                                    Clear Completed\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div className=\"filters\" onClick={changeFilter}>\r\n                <h2 className={`${activeFilter[0] ? \"active_filter\" : \"\"}`}>\r\n                    All\r\n                </h2>\r\n                <h2 className={`${activeFilter[1] ? \"active_filter\" : \"\"}`}>\r\n                    Active\r\n                </h2>\r\n                <h2 className={`${activeFilter[2] ? \"active_filter\" : \"\"}`}>\r\n                    Completed\r\n                </h2>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\r\nimport { v4 } from \"uuid\";\r\n\r\nconst Form = ({ changeTheme, inputText, setInputText, todos, setTodos }) => {\r\n    const inputTextHandler = (e) => {\r\n        setInputText(e.target.value);\r\n    };\r\n\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        setTodos([...todos, { text: inputText, completed: false, id: v4() }]);\r\n        setInputText(\"\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <h1>TODO</h1>\r\n                <div className=\"theme_toggle\" onClick={changeTheme}></div>\r\n            </header>\r\n            <form className=\"input row\">\r\n                <div className=\"check_box\"></div>\r\n                <input\r\n                    type=\"text\"\r\n                    onChange={inputTextHandler}\r\n                    placeholder=\"Create a new todo...\"\r\n                    value={inputText}\r\n                ></input>\r\n                <input type=\"submit\" onClick={submitTodoHandler} hidden />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Form;\r\n","import \"./App.css\";\r\nimport React, { useState } from \"react\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport Form from \"./components/Form\";\r\nimport { useEffect } from \"react\";\r\n\r\nfunction App() {\r\n    const [theme, setTheme] = useState(\"light\");\r\n    const [inputText, setInputText] = useState(\"\");\r\n    const [todos, setTodos] = useState([]);\r\n    const [filteredTodos, setFilteredTodos] = useState([]);\r\n    const [filter, setFilter] = useState(\"All\");\r\n\r\n    // Runs once on page load: Get theme and todo list from local storage\r\n    useEffect(() => {\r\n        function getLocalStorage() {\r\n            if (localStorage.getItem(\"todos\") === null) {\r\n                localStorage.setItem(\"todos\", JSON.stringify([]));\r\n            } else {\r\n                let local = JSON.parse(localStorage.getItem(\"todos\"));\r\n                setTodos(local);\r\n            }\r\n\r\n            if (localStorage.getItem(\"theme\") === null) {\r\n                localStorage.setItem(\"theme\", \"light\");\r\n            } else {\r\n                setTheme(localStorage.getItem(\"theme\"));\r\n            }\r\n        }\r\n        getLocalStorage();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Filter the todo list whenever the filter is changed or when a new todo is added\r\n        function filterHandler() {\r\n            switch (filter) {\r\n                case \"Completed\":\r\n                    setFilteredTodos(\r\n                        todos.filter((todo) => todo.completed === true)\r\n                    );\r\n                    break;\r\n                case \"Active\":\r\n                    setFilteredTodos(\r\n                        todos.filter((todo) => todo.completed === false)\r\n                    );\r\n                    break;\r\n                default:\r\n                    setFilteredTodos(todos);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // save the updated todo list and theme to local storage when changed\r\n        function saveToLocalStorage() {\r\n            localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n            localStorage.setItem(\"theme\", theme);\r\n        }\r\n\r\n        filterHandler();\r\n        saveToLocalStorage();\r\n    }, [todos, filter, theme]);\r\n\r\n    function changeTheme() {\r\n        if (theme === \"light\") {\r\n            setTheme(\"dark\");\r\n        } else {\r\n            setTheme(\"light\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`App ${theme}`} id=\"bg\">\r\n            <div className=\"hero_img\"></div>\r\n            <div className=\"container\">\r\n                <Form\r\n                    changeTheme={changeTheme}\r\n                    todos={todos}\r\n                    setTodos={setTodos}\r\n                    inputText={inputText}\r\n                    setInputText={setInputText}\r\n                />\r\n                <TodoList\r\n                    todos={todos}\r\n                    setTodos={setTodos}\r\n                    setFilter={setFilter}\r\n                    filteredTodos={filteredTodos}\r\n                />\r\n                <p className=\"drag\">Drag and drop to reorder list</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}